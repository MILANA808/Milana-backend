name: Run AKSI backend via Cloudflare Tunnel

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *'

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 350
    concurrency:
      group: aksi-backend
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Ensure backend files exist
        run: |
          mkdir -p .
          cat > requirements.txt <<'REQ'
          fastapi==0.115.5
          uvicorn==0.32.0
          textblob==0.18.0.post0
          numpy==2.1.2
          REQ
          cat > main.py <<'PY'
          from fastapi import FastAPI, APIRouter
          from pydantic import BaseModel
          from textblob import TextBlob
          import numpy as np

          app = FastAPI(title="Milana-backend", version="1.0.3")
          router = APIRouter()

          @app.get("/health")
          def health():
              return {"status": "ok", "service": "Milana-backend"}

          class EQSIn(BaseModel):
              text: str

          @router.post("/eqs")
          def eqs(payload: EQSIn):
              polarity = float(TextBlob(payload.text).sentiment.polarity)
              arousal = max(0.0, min(1.0, 0.5 * (payload.text.count("!") + len(payload.text) / 200.0)))
              score = float(np.clip(0.7*polarity + 0.3*(2*arousal-1), -1, 1))
              return {"eqs": score, "sentiment": polarity, "arousal": arousal}

          class PsiIn(BaseModel):
              phi: list[float]
              w: list[float]

          @router.post("/psi")
          def psi(payload: PsiIn):
              if len(payload.phi) != len(payload.w) or not payload.phi:
                  return {"error": "phi and w must be same non-zero length"}
              denom = float(np.sum(np.abs(payload.w))) or 1.0
              w_norm = [wi/denom for wi in payload.w]
              phi_clip = [float(np.clip(x, -1.0, 1.0)) for x in payload.phi]
              val = float(np.dot(w_norm, phi_clip))
              return {"psi": val, "phi": phi_clip, "w": w_norm}

          app.include_router(router)
          PY

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Start FastAPI
        run: nohup uvicorn main:app --host 0.0.0.0 --port 8000 &

      - name: Download cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Start tunnel
        id: tunnel
        run: |
          set -e
          cloudflared tunnel --url http://localhost:8000 --no-autoupdate > tunnel.log 2>&1 &
          sleep 8
          URL=$(grep -o 'https://[a-zA-Z0-9.-]*trycloudflare.com' tunnel.log | head -n1 || true)
          test -n "$URL"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Public URL: $URL"

      - name: Save endpoint artifact
        run: |
          echo "{\"url\":\"${{ steps.tunnel.outputs.url }}\",\"updated\":\"$(date -u +%FT%TZ)\"}" > endpoint.json
          cat endpoint.json

      - name: Upload endpoint artifact
        uses: actions/upload-artifact@v4
        with:
          name: endpoint
          path: endpoint.json
